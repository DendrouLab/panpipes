# ============================================================
# Preprocess workflow Panpipes (pipeline_preprocess.py)
# ============================================================
# This file contains the parameters for the ingest workflow.
# For full descriptions of the parameters, see the documentation at https://panpipes-pipelines.readthedocs.io/en/latest/yaml_docs/pipeline_preprocess_yml.html


#--------------------------
# Compute resources options
#--------------------------
resources:
  threads_high: 2
  threads_medium: 2
  threads_low: 1

condaenv:

# allows for tweaking where the jobs get submitted, in case there is a special queue for long jobs or you have access to a gpu
# leave as is if you do not want to use the alternative queues

#-------------------------------
# General project specifications
#-------------------------------
sample_prefix: 
unfiltered_obj: 

modalities:
  rna:  True
  prot: False
  rep: False
  atac: False

# ----------------------------
# Filtering Cells and Features
# ----------------------------
# Filtering is done sequentially for all modalities, filtering first cells and then features.
# In the following, you can specify the filtering parameters for each modality.

filtering:
  run: True
  keep_barcodes:

  #------------------------
  # RNA-specific filtering
  rna:
    # obs, i.e. cell level filtering
    obs:
      min:
        n_genes_by_counts:
      max:
        total_counts: 
        n_genes_by_counts:
        pct_counts_mt: 
        pct_counts_rp:
        doublet_scores:
      bool:

    # var, i.e. gene (feature) level filtering
    var:
      min:
        n_cells_by_counts: 
      max:
        total_counts:
        n_cells_by_counts:

  #------------------------
  # Protein-specific filtering
  prot:
    # obs, i.e. cell level filtering
    obs:  
      max:
        total_counts:

    # var, i.e. gene (feature) level filtering
    var:
      max:
      min:

  #------------------------
  # ATAC-specific filtering
  atac:
    # obs, i.e. cell level filtering
    obs:  
      max:

    # var, i.e. gene (feature) level filtering
    var:    
      nucleosome_signal:


# ---------------------------
# Intersecting cell barcodes
# ---------------------------
# Subset observations (cells) in-place by intersect
intersect_mods: 


# --------------------------
# Downsampling cell barcodes
# --------------------------
downsample_n:
downsample_col:
downsample_mods: 


# ------------------
# Plotting variables
# ------------------
# all metrics in this section should be provided as a comma separated string without spaces e.g. a,b,c
# leave blank to avoid plotting
plotqc:
  grouping_var: sample_id
  rna_metrics: pct_counts_mt,pct_counts_rp,pct_counts_hb,pct_counts_ig,doublet_scores
  prot_metrics: total_counts,log1p_total_counts,n_prot_by_counts,pct_counts_isotype
  atac_metrics: 
  rep_metrics:


# -----------------------
# RNA preprocessing steps
# -----------------------
# Currently, only standard preprocessing steps (sc.pp.normalize_total followed by sc.pp.log1p) is offered for the RNA modality.
log1p: True
hvg:
  flavor: seurat # Options: seurat, cell_ranger, or seurat_v3
  batch_key:
  n_top_genes: 2000
  min_mean:
  max_mean:
  min_disp:

  exclude_file: 
  exclude:
  filter: False

regress_variables:


#---------
# Scaling
run_scale: True
scale_max_value: 


#-----------------------------
# RNA Dimensionality Reduction
pca:
  n_pcs: 50
  solver: default
  color_by: sample_id


# ----------------------------------
# Protein (PROT) preprocessing steps
# ----------------------------------
prot:
  normalisation_methods: clr,dsb

  # CLR parameters:
  # 0 = normalise column-wise (per feature, recommended)
  # 1 = normalise row-wise (per cell)
  clr_margin: 0

  # DSB parameters:
  background_obj:
  quantile_clipping: True

  store_as_X:
  save_norm_prot_mtx: False

  #----------------------------
  # Protein Dimensionality reduction
  pca: False
  n_pcs: 50
  solver: default
  color_by: sample_id

# ------------------------------
# ATAC steps preprocessing steps
# ------------------------------
atac:
  binarize: False
  normalize: TFIDF # "log1p" or "TFIDF"
  # if normalize = "TFIDF", else leave blank:
  TFIDF_flavour: signac # "signac", "logTF" or "logIDF"
  # highly variable feature selection:
  # HVF selection either with scanpy's pp.highly_variable_genes() function or a pseudo-FindTopFeatures() function of the signac package
  feature_selection_flavour: signac  # "signac" or "scanpy"
  # parameters for HVF flavour == "scanpy", leave the below blank to use defaults
  min_mean: #default 0.05
  max_mean: #default 1.5
  min_disp: #default 0.5
  # if n_top_features is specified, it overwrites previous defaults for HVF selection
  n_top_features:
  # Filter the atac layer to retain only HVF 
  filter_by_hvf: False
  # parameter for HVF flavour == "signac"
  min_cutoff: q5
  # min_cutoff can be specified as follows:
  #   "q[x]": "q" followed by the minimum percentile, e.g. q5 will set the top 95% most common features as higly variable
  #   "c[x]": "c" followed by a minimum cell count, e.g. c100 will set features present in > 100 cells as highly variable
  #   "tc[x]": "tc" followed by a minimum total count, e.g. tc100 will set features with total counts > 100 as highly variable
  #   "NULL": All features are assigned as highly variable
  #   "NA": Highly variable features won't be changed
  #----------------------------
  # ATAC Dimensionality reduction
  #----------------------------
  dimred: LSI #PCA or LSI (LSI will only be computed if the normalize param is set to TFIDF)
  n_comps: 50 # how many components to compute
  # which dimension to exclude from further processing (sometimes useful to remove PC/LSI_1  if it's associated to tech factors)
  # leave blank to retain all 
  # if using PCA, which solver to use. Default == 'arpack'
  solver: default
  # what covariate to use to color the dimensionality reduction
  color_by: sample_id
  # whether to remove the component(s) associated to technical effects, common to remove 1 for LSI
  # leave blank to avoid removing any
  dim_remove: 


